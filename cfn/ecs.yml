AWSTemplateFormatVersion: 2010-09-09
Description: Offchain RPC ECS Service

Parameters:
  Namespace:
    Type: String
    Description: Network name used for namespacing
    AllowedPattern: "[a-z][a-z0-9-]+"

  CustomDomainName:
    Type: String
    Description: Domain name for the service

  ServiceCount:
    Type: Number
    Default: 1

  ImageURI:
    Type: String

  ServiceName:
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID

  SubnetA:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet A ID

  SubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet B ID

  DatabaseUserSecret:
    Type: String
    Description: Database User Secret

  HostedZoneId:
    Type: String
    Description: Hosted zone ID for the service

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security group for the ALB

  AlbHttpsListener:
    Type: String
    Description: HTTPS listener ARN for the ALB

  AlbHostedZoneId:
    Type: String
    Description: Hosted zone ID for the ALB

  AlbDNSName:
    Type: String
    Description: DNS name for the ALB

  ContainerSize:
    Type: String
    Default: Small
    AllowedValues:
      - Small
      - Medium
      - Large
    Description: Small (0.5 vCPU, 1 GB RAM), Medium (2 vCPU, 4 GB RAM), Large (4 vCPU, 8 GB RAM)


Mappings:
  Fargate:
    Small:
      Cpu: 512
      Memory: 1024
    Medium:
      Cpu: 2048
      Memory: 4096
    Large:
      Cpu: 4096
      Memory: 8192

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - Name: !Sub ${CustomDomainName}
          Type: A
          AliasTarget:
            HostedZoneId: !Ref AlbHostedZoneId
            DNSName: !Ref AlbDNSName

  TaskExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskExecSecretsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref TaskExecRole
      PolicyName: !Sub ${AWS::StackName}-secrets
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource:
              - !Ref DatabaseUserSecret
              - !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}-??????

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /ecs/${Namespace}
      RetentionInDays: 7

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      Family: !Ref Namespace
      Cpu: !FindInMap [Fargate, !Ref ContainerSize, Cpu]
      Memory: !FindInMap [Fargate, !Ref ContainerSize, Memory]
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Image: !Ref ImageURI
          Name: !Ref ServiceName
          Essential: true
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          Secrets:
            - Name: username
              ValueFrom: !Sub "${DatabaseUserSecret}:username::"
            - Name: password
              ValueFrom: !Sub "${DatabaseUserSecret}:password::"
            - Name: HC_HELPER_ADDR
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:HC_HELPER_ADDR::"
            - Name: ENTRY_POINTS
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:ENTRY_POINT::"
            - Name: ENTRY_POINT
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:ENTRY_POINT::"
            - Name: CHAIN_ID
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:CHAIN_ID::"
            - Name: OC_HYBRID_ACCOUNT
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:OC_HYBRID_ACCOUNT::"
            - Name: OC_OWNER
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:OC_OWNER::"
            - Name: OC_PRIVKEY
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:OC_PRIVKEY::"
            - Name: POSTGRES_HOST
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:POSTGRES_HOST::"
            - Name: OPENAI_API_KEY
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:OPENAI_API_KEY::"
            - Name: RPC_URL
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:RPC_URL::"
            - Name: PRE_SIM_TOKEN_ADDR
              ValueFrom: !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${Namespace}:PRE_SIM_TOKEN_ADDR::"
          Environment:
            - Name: OC_LISTEN_PORT
              Value: 1234
            - Name: FORCE_UPDATE
              Value: "false"
          PortMappings:
            - ContainerPort: 1234

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      EnableExecuteCommand: true
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
      DesiredCount: !Ref ServiceCount
      LaunchType: FARGATE
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: 1234
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 1234
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      Matcher:
        HttpCode: 200-499
      TargetType: ip

  HTTP443ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref AlbHttpsListener
      Priority: 100
      Conditions:
        - Field: host-header
          Values:
            - !Sub ${CustomDomainName}
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1234
          ToPort: 1234
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue: !Sub ${Namespace}-rds-security-group
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref SecurityGroup

Outputs:
  SecurityGroup:
    Value: !Ref SecurityGroup
